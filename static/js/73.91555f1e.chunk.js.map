{"version":3,"file":"static/js/73.91555f1e.chunk.js","mappings":"8SAEMA,EAAM,mCAENC,EAAWC,EAAAA,EAAAA,OAAa,CAC5BC,QAAQ,iCAGH,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,sGACkBH,EAASI,IAAT,qCAA2CL,IAD7D,uBACGM,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,yFACkBP,EAASI,IAAT,iBACXG,EADW,oBACGR,EADH,oBADlB,uBACGM,EADH,EACGA,KADH,kBAIEA,GAJF,kEAOA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAuBD,GAAvB,yFACkBP,EAASI,IAAT,iBACXG,EADW,4BACWR,EADX,oBADlB,uBACGM,EADH,EACGA,KADH,kBAIEA,GAJF,kEAOA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA0BF,GAA1B,yFACkBP,EAASI,IAAT,iBACXG,EADW,4BACWR,EADX,2BADlB,uBACGM,EADH,EACGA,KADH,kBAIEA,GAJF,kEAOA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,yFACkBX,EAASI,IAAT,gCACIL,EADJ,4DAC2DY,IAF7E,uBACGN,EADH,EACGA,KADH,kBAIEA,GAJF,kE,qICjCP,EAA2B,2BAA3B,EAAiE,2BAAjE,EAAmG,uBAAnG,EAAiI,uB,2BCMlH,SAASO,IACtB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACMC,GAASC,EAAAA,EAAAA,OAEfC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,2FAChBN,GAAW,GADK,mBAGOT,EAAAA,EAAAA,IAAQY,EAAOb,IAHtB,OAGRiB,EAHQ,OAIdT,EAASS,EAAOC,MAJF,gDAMdN,EAAS,EAAD,IANM,yBAQdF,GAAW,GARG,4EAAH,qDAWfM,GACD,GAAE,CAACH,EAAOb,GAAIY,EAAUJ,EAAUE,IAEnC,IAAMS,EAAWZ,EAAMa,KAAI,SAAAC,GACzB,OACE,gBAAkBC,UAAWC,EAA7B,UACGF,EAAKG,cACJ,gBACEC,IAAK,yCAAkCJ,EAAKG,eAAkBE,EAC9DC,IAAKN,EAAKO,cACVC,MAAO,OAGT,gBAAKJ,IAAKC,EAAOC,IAAKN,EAAKO,cAAeC,MAAO,OAEnD,cAAGP,UAAWC,EAAd,SAA4BF,EAAKO,iBACjC,eAAGN,UAAWC,EAAd,WACE,yCACCF,EAAKS,eAbDT,EAAKrB,GAiBjB,IAED,OACE,iCACE,eAAIsB,UAAWC,EAAf,SAAiCJ,IAChCV,IAAW,SAAC,KAAD,IACXE,IAAS,qCAAaA,EAAMoB,aAGlC,C","sources":["components/modules/shared/api/movies.js","webpack://react-homework-template/./src/components/pages/CastPage/CastPage.module.scss?220c","components/pages/CastPage/CastPage.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = '0a221be11a4630df713925aec9466cbd';\n\nconst instance = axios.create({\n  baseURL: `https://api.themoviedb.org/3`,\n});\n\nexport async function getMoviesList() {\n  const { data } = await instance.get(`/trending/all/week?api_key=${KEY}`);\n  return data;\n}\n\nexport async function getMovieItem(id) {\n  const { data } = await instance.get(\n    `/movie/${id}?api_key=${KEY}&language=en-US`\n  );\n  return data;\n}\n\nexport async function getCast(id) {\n  const { data } = await instance.get(\n    `/movie/${id}/credits?api_key=${KEY}&language=en-US`\n  );\n  return data;\n}\n\nexport async function getReviews(id) {\n  const { data } = await instance.get(\n    `/movie/${id}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  return data;\n}\n\nexport async function getSearchMovies(value) {\n  const { data } = await instance.get(\n    `/search/movie?api_key=${KEY}&language=en-US&page=1&include_adult=false&query=${value}`\n  );\n  return data;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"castList\":\"CastPage_castList__1I1nV\",\"listItem\":\"CastPage_listItem__njLw6\",\"text\":\"CastPage_text__fLi4w\",\"name\":\"CastPage_name__AlI1d\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from 'components/modules/shared/api/movies';\nimport styles from './CastPage.module.scss';\nimport photo from '../NoFoundPage/notFound.jpg';\nimport { Audio } from 'react-loader-spinner';\n\nexport default function CastPage() {\n  const [items, setItems] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const params = useParams();\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      setLoading(true);\n      try {\n        const result = await getCast(params.id);\n        setItems(result.cast);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchCast();\n  }, [params.id, setError, setItems, setLoading]);\n\n  const elements = items.map(item => {\n    return (\n      <li key={item.id} className={styles.listItem}>\n        {item.profile_path ? (\n          <img\n            src={`https://image.tmdb.org/t/p/w500${item.profile_path}` || photo}\n            alt={item.original_name}\n            width={200}\n          />\n        ) : (\n          <img src={photo} alt={item.original_name} width={200} />\n        )}\n        <p className={styles.name}>{item.original_name}</p>\n        <p className={styles.text}>\n          <span>Character:</span>\n          {item.character}\n        </p>\n      </li>\n    );\n  });\n\n  return (\n    <>\n      <ul className={styles.castList}>{elements}</ul>\n      {loading && <Audio />}\n      {error && <p>Fail ....{error.message}</p>}\n    </>\n  );\n}\n"],"names":["KEY","instance","axios","baseURL","getMoviesList","get","data","getMovieItem","id","getCast","getReviews","getSearchMovies","value","CastPage","useState","items","setItems","loading","setLoading","error","setError","params","useParams","useEffect","fetchCast","result","cast","elements","map","item","className","styles","profile_path","src","photo","alt","original_name","width","character","message"],"sourceRoot":""}